# version: "3.8"

services:
  postgres:
    image: postgres:17
    container_name: chrono_wiki_postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: >
      postgres -c shared_preload_libraries='pg_stat_statements' -c max_connections=200 -c shared_buffers=256MB -c effective_cache_size=1GB -c maintenance_work_mem=64MB -c checkpoint_completion_target=0.9 -c wal_buffers=16MB -c default_statistics_target=100 -c random_page_cost=1.1 -c effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      timeout: 20s
      retries: 10

  test_postgres:
    image: postgres:17
    container_name: chrono_wiki_test_postgres
    restart: "no"
    environment:
      POSTGRES_DB: ${TEST_POSTGRES_DB}
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${TEST_POSTGRES_PORT}:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    command: >
      postgres -c shared_preload_libraries='pg_stat_statements' -c max_connections=50 -c shared_buffers=128MB -c effective_cache_size=512MB -c maintenance_work_mem=32MB -c checkpoint_completion_target=0.9 -c wal_buffers=8MB -c default_statistics_target=50 -c random_page_cost=1.1 -c effective_io_concurrency=100
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${TEST_POSTGRES_USER} -d ${TEST_POSTGRES_DB}",
        ]
      timeout: 10s
      retries: 5
    profiles:
      - test

  api:
    container_name: chrono_wiki_api
    build:
      context: .
      args:
        ENVIRONMENT: ${ENVIRONMENT}
    ports:
      - "${API_PORT}:${API_INTERNAL_PORT}"
    volumes:
      - .:/app
      - ${HOME}/.ssh:/root/.ssh:delegated
      - ${HOME}/.gnupg:/root/.gnupg:delegated
    env_file:
      - .env
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - TEST_DATABASE_URL=postgresql://${TEST_POSTGRES_USER}:${TEST_POSTGRES_PASSWORD}@test_postgres:5432/${TEST_POSTGRES_DB}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - TZ=Asia/Tokyo
    depends_on:
      postgres:
        condition: service_healthy
    command: uvicorn app.main:app --host ${API_HOST} --port ${API_INTERNAL_PORT} --reload

  coverage:
    container_name: chrono_wiki_coverage
    build:
      context: .
      args:
        ENVIRONMENT: ${ENVIRONMENT}
    ports:
      - "8080:8080"
    volumes:
      - .:/app
    working_dir: /app/htmlcov
    command: python -m http.server 8080
    profiles:
      - coverage

volumes:
  postgres_data:
  test_postgres_data:
