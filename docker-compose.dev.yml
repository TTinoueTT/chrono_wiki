# version: "3.8"

services:
  postgres:
    image: postgres:17
    container_name: ${POSTGRES_CONTAINER_NAME}
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      LANGUAGE: en_US.UTF-8
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_INTERNAL_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: >
      postgres -c shared_preload_libraries='pg_stat_statements' -c max_connections=200 -c shared_buffers=256MB -c effective_cache_size=1GB -c maintenance_work_mem=64MB -c checkpoint_completion_target=0.9 -c wal_buffers=16MB -c default_statistics_target=100 -c random_page_cost=1.1 -c effective_io_concurrency=200
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      timeout: 20s
      retries: 10

  test_postgres:
    image: postgres:17
    container_name: ${TEST_POSTGRES_CONTAINER_NAME}
    restart: "no"
    environment:
      POSTGRES_DB: ${TEST_POSTGRES_DB}
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      LANGUAGE: en_US.UTF-8
    ports:
      - "${TEST_POSTGRES_PORT}:${TEST_POSTGRES_INTERNAL_PORT}"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    command: >
      postgres -c shared_preload_libraries='pg_stat_statements' -c max_connections=50 -c shared_buffers=128MB -c effective_cache_size=512MB -c maintenance_work_mem=32MB -c checkpoint_completion_target=0.9 -c wal_buffers=8MB -c default_statistics_target=50 -c random_page_cost=1.1 -c effective_io_concurrency=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${TEST_POSTGRES_USER} -d ${TEST_POSTGRES_DB}" ]
      timeout: 10s
      retries: 5
    profiles:
      - test

  # redis:
  #   image: redis:7-alpine
  #   container_name: ${REDIS_CONTAINER_NAME:-redis}
  #   restart: always
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --appendonly yes
  #   healthcheck:
  #     test: [ "CMD", "redis-cli", "ping" ]
  #     timeout: 5s
  #     retries: 5

  # test_redis:
  #   image: redis:7-alpine
  #   container_name: ${TEST_REDIS_CONTAINER_NAME:-test_redis}
  #   restart: "no"
  #   ports:
  #     - "${TEST_REDIS_PORT:-6380}:6379"
  #   volumes:
  #     - test_redis_data:/data
  #   command: redis-server --appendonly yes
  #   profiles:
  #     - test

  api:
    container_name: ${API_CONTAINER_NAME}
    build:
      context: .
      args:
        ENVIRONMENT: ${ENVIRONMENT}
    ports:
      - "${API_PORT}:${API_INTERNAL_PORT}"
    volumes:
      - .:/app
      - ${HOME}/.ssh:/root/.ssh:delegated
      - ${HOME}/.gnupg:/root/.gnupg:delegated
    env_file:
      - .env
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_CONTAINER_NAME}:${POSTGRES_INTERNAL_PORT}/${POSTGRES_DB}
      - TEST_DATABASE_URL=postgresql://${TEST_POSTGRES_USER}:${TEST_POSTGRES_PASSWORD}@${TEST_POSTGRES_CONTAINER_NAME}:${TEST_POSTGRES_INTERNAL_PORT}/${TEST_POSTGRES_DB}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - TZ=Asia/Tokyo
      # - REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}
      # - TEST_REDIS_URL=redis://${TEST_REDIS_HOST}:${TEST_REDIS_PORT}/${TEST_REDIS_DB}
    depends_on:
      postgres:
        condition: service_healthy
      # redis:
      #   condition: service_healthy
    command: uvicorn app.main:app --host ${API_HOST} --port ${API_INTERNAL_PORT} --reload

  coverage:
    container_name: ${COV_CONTAINER_NAME}
    build:
      context: .
      args:
        ENVIRONMENT: ${ENVIRONMENT}
    ports:
      - "${COV_PORT}:${COV_INTERNAL_PORT}"
    volumes:
      - .:/app
    working_dir: /app/htmlcov
    command: python -m http.server ${COV_INTERNAL_PORT}
    profiles:
      - coverage

volumes:
  postgres_data:
  test_postgres_data:
    # redis_data:
    # test_redis_data:
